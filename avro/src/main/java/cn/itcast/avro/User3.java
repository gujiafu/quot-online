/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cn.itcast.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User3 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7021923246170841642L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User3\",\"namespace\":\"cn.itcast.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"long\"},{\"name\":\"male\",\"type\":\"boolean\",\"default\":true}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public long age;
  @Deprecated public boolean male;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User3() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param age The new value for age
   * @param male The new value for male
   */
  public User3(java.lang.CharSequence name, java.lang.Long age, java.lang.Boolean male) {
    this.name = name;
    this.age = age;
    this.male = male;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return male;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Long)value$; break;
    case 2: male = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Long getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Long value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'male' field.
   * @return The value of the 'male' field.
   */
  public java.lang.Boolean getMale() {
    return male;
  }

  /**
   * Sets the value of the 'male' field.
   * @param value the value to set.
   */
  public void setMale(java.lang.Boolean value) {
    this.male = value;
  }

  /**
   * Creates a new User3 RecordBuilder.
   * @return A new User3 RecordBuilder
   */
  public static cn.itcast.avro.User3.Builder newBuilder() {
    return new cn.itcast.avro.User3.Builder();
  }

  /**
   * Creates a new User3 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User3 RecordBuilder
   */
  public static cn.itcast.avro.User3.Builder newBuilder(cn.itcast.avro.User3.Builder other) {
    return new cn.itcast.avro.User3.Builder(other);
  }

  /**
   * Creates a new User3 RecordBuilder by copying an existing User3 instance.
   * @param other The existing instance to copy.
   * @return A new User3 RecordBuilder
   */
  public static cn.itcast.avro.User3.Builder newBuilder(cn.itcast.avro.User3 other) {
    return new cn.itcast.avro.User3.Builder(other);
  }

  /**
   * RecordBuilder for User3 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User3>
    implements org.apache.avro.data.RecordBuilder<User3> {

    private java.lang.CharSequence name;
    private long age;
    private boolean male;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cn.itcast.avro.User3.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.male)) {
        this.male = data().deepCopy(fields()[2].schema(), other.male);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User3 instance
     * @param other The existing instance to copy.
     */
    private Builder(cn.itcast.avro.User3 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.male)) {
        this.male = data().deepCopy(fields()[2].schema(), other.male);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Long getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder setAge(long value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'male' field.
      * @return The value.
      */
    public java.lang.Boolean getMale() {
      return male;
    }

    /**
      * Sets the value of the 'male' field.
      * @param value The value of 'male'.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder setMale(boolean value) {
      validate(fields()[2], value);
      this.male = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'male' field has been set.
      * @return True if the 'male' field has been set, false otherwise.
      */
    public boolean hasMale() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'male' field.
      * @return This builder.
      */
    public cn.itcast.avro.User3.Builder clearMale() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public User3 build() {
      try {
        User3 record = new User3();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Long) defaultValue(fields()[1]);
        record.male = fieldSetFlags()[2] ? this.male : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
